const pool = require('../config/database');
const fs = require('fs');
const path = require('path');

class IPTracker {
    constructor() {
        this.banDurationHours = parseInt(process.env.BAN_DURATION_HOURS) || 4;
        this.allowSearchBots = process.env.ALLOW_SEARCH_BOTS !== 'false';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
        this.whitelistConfig = this.loadWhitelistConfig();
        
        // –°–ø–∏—Å–æ–∫ User-Agent –ø–æ–∏—Å–∫–æ–≤—ã—Ö –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è
        this.searchBots = [
            'googlebot',
            'bingbot',
            'yandexbot',
            'baiduspider',
            'facebookexternalhit',
            'twitterbot',
            'linkedinbot',
            'whatsapp',
            'telegrambot',
            'applebot',
            'duckduckbot',
            'slurp',
            'ia_archiver'
        ];
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
    loadWhitelistConfig() {
        try {
            const configPath = path.join(__dirname, '../config/whitelist.json');
            const configData = fs.readFileSync(configPath, 'utf8');
            return JSON.parse(configData);
        } catch (error) {
            console.error('Error loading whitelist config:', error);
            return {
                ipRanges: [],
                googleRanges: [],
                microsoftRanges: [],
                customIPs: [],
                awsRanges: []
            };
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –ø–æ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫—É
    isIPWhitelisted(ip) {
        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ IPv6-mapped IPv4 –∞–¥—Ä–µ—Å–æ–≤ (—Ñ–æ—Ä–º–∞—Ç ::ffff:x.x.x.x)
            if (typeof ip === 'string' && ip.startsWith('::ffff:')) {
                const mapped = ip.substring('::ffff:'.length);
                // –Ø–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ::ffff:172.*
                if (mapped.startsWith('172.')) {
                    return true;
                }
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–∂–µ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º IPv4
                ip = mapped;
            }

            // Localhost IPs
            if (this.whitelistConfig.ipRanges.includes(ip)) {
                return true;
            }

            // –¢–æ—á–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞
            if (this.whitelistConfig.customIPs.includes(ip)) {
                return true;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
            const ipParts = ip.split('.');
            if (ipParts.length !== 4) return false;

            // Google –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            for (const range of this.whitelistConfig.googleRanges) {
                if (this.checkIPRange(ipParts, range)) {
                    return true;
                }
            }

            // Microsoft –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            for (const range of this.whitelistConfig.microsoftRanges) {
                if (this.checkIPRange(ipParts, range)) {
                    return true;
                }
            }

            return false;
        } catch (error) {
            console.error('Error checking IP whitelist:', error);
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    checkIPRange(ipParts, range) {
        const rangeParts = range.split('.');
        if (rangeParts.length !== 4) return false;

        for (let i = 0; i < 4; i++) {
            if (rangeParts[i] === '*') continue;
            if (ipParts[i] !== rangeParts[i]) return false;
        }
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ User-Agent –ø–æ–∏—Å–∫–æ–≤—ã–º –±–æ—Ç–æ–º
    isSearchBot(userAgent) {
        if (!userAgent) return false;
        const ua = userAgent.toLowerCase();
        return this.searchBots.some(bot => ua.includes(bot));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–æ–≤ –ø–æ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫—É (–∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π isGooglebotIP)
    async isIPWhitelistedAsync(ip) {
        return this.isIPWhitelisted(ip);
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Google Ads –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL
    extractGoogleAdsParams(req) {
        const params = {};
        const query = req.query || {};
        
        // Google Ads –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (query.gclid) params.gclid = query.gclid;
        if (query.gclsrc) params.gclsrc = query.gclsrc;
        if (query.gbraid) params.gbraid = query.gbraid;
        if (query.wbraid) params.wbraid = query.wbraid;
        
        // UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (query.utm_source) params.utm_source = query.utm_source;
        if (query.utm_medium) params.utm_medium = query.utm_medium;
        if (query.utm_campaign) params.utm_campaign = query.utm_campaign;
        if (query.utm_term) params.utm_term = query.utm_term;
        if (query.utm_content) params.utm_content = query.utm_content;
        
        return params;
    }

    async trackIP(ip, userAgent, req = null) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º Google Ads –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            const adsParams = req ? this.extractGoogleAdsParams(req) : {};
            
            // –ü–æ–∏—Å–∫–æ–≤—ã–µ –±–æ—Ç—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
            if (this.allowSearchBots && this.isSearchBot(userAgent)) {
                console.log(`ü§ñ Search bot detected: ${userAgent.substring(0, 50)}..., IP: ${ip} - allowing access`);
                return {
                    isBanned: false,
                    visitCount: 0,
                    firstVisit: new Date(),
                    hoursSinceFirstVisit: 0,
                    isSearchBot: true
                };
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –±–µ–ª–æ–º—É —Å–ø–∏—Å–∫—É IP (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏ User-Agent –ø–æ–¥–¥–µ–ª–∞–Ω)
            if (this.allowSearchBots && await this.isIPWhitelistedAsync(ip)) {
                console.log(`‚úÖ Whitelisted IP detected: ${ip} - allowing access`);
                return {
                    isBanned: false,
                    visitCount: 0,
                    firstVisit: new Date(),
                    hoursSinceFirstVisit: 0,
                    isSearchBot: true
                };
            }

            // Check if IP already exists
            const existingIP = await pool.query(
                'SELECT * FROM ip_tracking WHERE ip_address = $1',
                [ip]
            );

            if (existingIP.rows.length > 0) {
                const record = existingIP.rows[0];
                const now = new Date();
                const firstVisit = new Date(record.first_visit);
                const hoursSinceFirstVisit = (now - firstVisit) / (1000 * 60 * 60);

                // Check if 4 hours have passed since first visit
                if (hoursSinceFirstVisit >= this.banDurationHours && !record.is_banned) {
                    // Ban the IP
                    await pool.query(
                        'UPDATE ip_tracking SET is_banned = true, banned_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP WHERE ip_address = $1',
                        [ip]
                    );
                    console.log(`üö´ IP ${ip} has been banned after ${hoursSinceFirstVisit.toFixed(2)} hours`);
                }

                // Update visit count, last visit and Google Ads params (only if new params exist)
                const hasNewAdsParams = Object.keys(adsParams).length > 0;
                if (hasNewAdsParams) {
                    const updateFields = ['visit_count = visit_count + 1', 'last_visit = CURRENT_TIMESTAMP', 'updated_at = CURRENT_TIMESTAMP'];
                    const updateValues = [ip];
                    let paramIndex = 2;

                    // –î–æ–±–∞–≤–ª—è–µ–º Google Ads –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ UPDATE –∑–∞–ø—Ä–æ—Å
                    for (const [key, value] of Object.entries(adsParams)) {
                        updateFields.push(`${key} = $${paramIndex}`);
                        updateValues.push(value);
                        paramIndex++;
                    }

                    await pool.query(
                        `UPDATE ip_tracking SET ${updateFields.join(', ')} WHERE ip_address = $1`,
                        updateValues
                    );
                    console.log(`üìä Updated IP ${ip} with Google Ads params:`, adsParams);
                } else {
                    // –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ Google Ads –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    await pool.query(
                        'UPDATE ip_tracking SET visit_count = visit_count + 1, last_visit = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP WHERE ip_address = $1',
                        [ip]
                    );
                }

                return {
                    isBanned: record.is_banned || hoursSinceFirstVisit >= this.banDurationHours,
                    visitCount: record.visit_count + 1,
                    firstVisit: record.first_visit,
                    hoursSinceFirstVisit: hoursSinceFirstVisit
                };
            } else {
                // Insert new IP with Google Ads params
                const insertFields = ['ip_address', 'user_agent'];
                const insertValues = [ip, userAgent];
                const placeholders = ['$1', '$2'];
                let paramIndex = 3;

                // –î–æ–±–∞–≤–ª—è–µ–º Google Ads –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ INSERT –∑–∞–ø—Ä–æ—Å
                for (const [key, value] of Object.entries(adsParams)) {
                    insertFields.push(key);
                    insertValues.push(value);
                    placeholders.push(`$${paramIndex}`);
                    paramIndex++;
                }

                const result = await pool.query(
                    `INSERT INTO ip_tracking (${insertFields.join(', ')}) VALUES (${placeholders.join(', ')}) RETURNING *`,
                    insertValues
                );
                
                if (Object.keys(adsParams).length > 0) {
                    console.log(`üìù New IP tracked: ${ip} with Google Ads params:`, adsParams);
                } else {
                    console.log(`üìù New IP tracked: ${ip}`);
                }
                
                return {
                    isBanned: false,
                    visitCount: 1,
                    firstVisit: result.rows[0].first_visit,
                    hoursSinceFirstVisit: 0
                };
            }
        } catch (error) {
            console.error('Error tracking IP:', error);
            return {
                isBanned: false,
                visitCount: 1,
                firstVisit: new Date(),
                hoursSinceFirstVisit: 0
            };
        }
    }

    async logRedirect(ip, userAgent) {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å, –Ω–µ –≤ –ë–î
        console.log(`üîÑ Redirect for banned IP: ${ip}, User-Agent: ${userAgent.substring(0, 100)}...`);
    }

    async isIPBanned(ip) {
        try {
            const result = await pool.query(
                'SELECT is_banned, banned_at FROM ip_tracking WHERE ip_address = $1',
                [ip]
            );

            if (result.rows.length > 0) {
                return result.rows[0].is_banned;
            }
            return false;
        } catch (error) {
            console.error('Error checking IP ban status:', error);
            return false;
        }
    }

    async getIPStats(ip) {
        try {
            const result = await pool.query(
                'SELECT * FROM ip_tracking WHERE ip_address = $1',
                [ip]
            );

            if (result.rows.length > 0) {
                return result.rows[0];
            }
            return null;
        } catch (error) {
            console.error('Error getting IP stats:', error);
            return null;
        }
    }

    async getRedirectCount(ip) {
        // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
        // –ù–µ —Ö—Ä–∞–Ω–∏–º –≤ –ë–î, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ
        return Math.floor(Math.random() * 10000) + 1;
    }
}

module.exports = new IPTracker();
